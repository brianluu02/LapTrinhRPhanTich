library("knitr")
knit_hooks$set(purl = hook_purl)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(plyr)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(dplyr)
library(Metrics)
library(caTools)
library(stargazer)
library(gghighlight)
library(ggthemes)
marketing_data <- read.csv("data/marketing_data.csv", header = T)
cat("Tập dữ liệu gồm", nrow(marketing_data),"dòng và",ncol(marketing_data),"cột")
convertIncome = function(income){
income <- gsub('[$., ]', '', income)
for(i in 1:length(income)){
income[i] <- substring(income[i], 1, nchar(income[i])-2)
}
income <- as.integer(income)
return(income)
}
convertToYear = function(date){
for(i in 1:length(date)){
if(nchar(date[i]) == 8){
date[i] <- substring(date[i], 5, nchar(date[i]))
}
else if(nchar(date[i]) == 9){
date[i] <- substring(date[i], 6, nchar(date[i]))
}
else{
date[i] <- substring(date[i], 7, nchar(date[i]))
}
}
date <- as.numeric(date)
return(date)
}
marketing_data$Income <- convertIncome(marketing_data$Income)
df_num<-select_if(marketing_data,is.numeric)%>%select(-ID)
df_num_p<-df_num%>%gather(variable,values,1:23)
df_num_p%>%ggplot()+
geom_boxplot(aes(x=variable,y=values), outlier.color="red") +
facet_wrap(~variable,ncol=5,scales="free") +
theme(strip.text.x = element_blank(),
text = element_text(size=9))
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
marketing_data$Income <- remove_outliers(marketing_data$Income)
marketing_data$MntWines <- remove_outliers(marketing_data$MntWines)
marketing_data$MntFruits <- remove_outliers(marketing_data$MntFruits)
marketing_data$MntMeatProducts <- remove_outliers(marketing_data$MntMeatProducts)
marketing_data$MntFishProducts <- remove_outliers(marketing_data$MntFishProducts)
marketing_data$MntSweetProducts <- remove_outliers(marketing_data$MntSweetProducts)
marketing_data$MntGoldProds <- remove_outliers(marketing_data$MntGoldProds)
marketing_data$NumCatalogPurchases <- remove_outliers(marketing_data$NumCatalogPurchases)
marketing_data$NumWebPurchases <- remove_outliers(marketing_data$NumWebPurchases)
head(marketing_data)
count(marketing_data$Marital_Status)
marketing_data$Rel_Status[marketing_data$Marital_Status %in% c('Alone', 'Divorced', 'Single', 'Widow')] <- 'Single'
marketing_data$Rel_Status[marketing_data$Marital_Status %in% c('Married', 'Together')] <- 'Coupled'
marketing_data$Rel_Status[marketing_data$Marital_Status %in% c('Absurd', 'YOLO')] <- ''
marketing_data <- marketing_data %>%
mutate(MntSpent = MntFishProducts + MntMeatProducts + MntFruits + MntSweetProducts + MntWines + MntGoldProds) %>%   mutate(NumPurchases = NumCatalogPurchases + NumStorePurchases + NumWebPurchases + NumDealsPurchases) %>%
mutate(TotalKid = Kidhome + Teenhome) %>%
mutate(TotalAccepted = AcceptedCmp1 + AcceptedCmp2 + AcceptedCmp3 + AcceptedCmp4 + AcceptedCmp5) %>%
mutate(Child = case_when (TotalKid == 0 ~ 0, TotalKid != 0 ~ 1))
uncolumn <- c('ID', 'Kidhome', 'Marital_Status', 'Teenhome', 'Year_Birth')
marketing_data <- marketing_data %>%
select(-one_of(uncolumn)) %>%
mutate_all(na_if, '') %>%
na.omit()
accptByCountry <- marketing_data %>% group_by(marketing_data$Country, marketing_data$Response) %>%
dplyr::summarize(total_count=n(), .groups = 'drop') %>% as.data.frame()
accptByCountry
dt_accptByCountry <- matrix(c(21, 125, 38, 226, 17, 99, 12, 134, 2, 1, 52, 283, 176, 917, 13, 94), nrow = 8, byrow = T)
dt_accptByCountry
chisq.test(dt_accptByCountry)
accptByChild <- marketing_data %>% group_by(marketing_data$Child, marketing_data$AcceptedCmp4) %>%
dplyr::summarize(total_count=n(), .groups = 'drop') %>% as.data.frame()
accptByChild
dt_accptByChild <- matrix(c(97, 1482, 67, 564), nrow = 2, byrow = T)
dt_accptByChild
chisq.test(dt_accptByChild)
colSums(is.na(marketing_data))
data_1<- na.omit(marketing_data)
str(data_1)
set.seed(123)
sample <- sample.split(marketing_data , SplitRatio = 0.7)
X_train <- subset(marketing_data, sample == TRUE)
X_test <- subset(marketing_data, sample == FALSE)
model <- lm(X_train$MntSpent ~ .- Dt_Customer - MntGoldProds - MntSweetProducts - MntFishProducts - MntMeatProducts - MntWines - MntFruits, data = X_train)
summary(model)
pvaluedf <- data.frame(summary(model)$coefficients[,c('Pr(>|t|)', 'Estimate')])
colnames(pvaluedf) <- c('pvalue', 'coefficient')
pvaluedf$variables <- rownames(pvaluedf)
#Plot the variables and their significance
pvaluedf %>%
ggplot(aes(x = reorder(variables, pvalue),y = pvalue)) +
geom_col() +
geom_hline(yintercept = 0.05, color = "white") + ## level of Significance
geom_text(aes(x = 2, y = 0.10),label = "5%", color = "darkred") +
scale_x_discrete(name = "Predictors") +
ggtitle("X-Variables and their P-Values") +
coord_flip() +
theme_minimal()
re_select <-select( X_train ,c('Income', 'MntSpent', 'NumWebVisitsMonth', 'NumCatalogPurchases', 'NumWebPurchases', 'NumStorePurchases'))
model1 <- lm(X_train$MntSpent ~., data = re_select)
summary(model1)
ggplot(data=model1, aes(model1$residuals)) +
geom_histogram(binwidth = 1, color = "black", fill = "purple4") +
theme(panel.background = element_rect(fill = "white"),
axis.line.x=element_line(),
axis.line.y=element_line()) +
ggtitle("Histogram for Model Residuals")
stargazer(model1, type = "text")
subset(re_select, (MntSpent < 99999999))  %>%
ggplot(aes(Income  ,MntSpent)) +
geom_point(alpha=0.5, size=2 , aes(color=MntSpent)) +
geom_smooth(method='lm', formula= y~x) +
labs(y="MntSpent", x="Income", subtitle="Icome vs MntSpent")
subset(re_select, (MntSpent < 99999999))  %>%
ggplot(aes(NumStorePurchases  ,MntSpent)) +
geom_point(alpha=0.5, size=2 , aes(color=MntSpent)) +
geom_smooth(method='lm', formula= y~x) +
labs(y="MntSpent", x="NumStorePurchases", subtitle="NumStorePurchases vs MntSpent")
subset(re_select, (MntSpent < 99999999))  %>%
ggplot(aes(NumWebPurchases  ,MntSpent)) +
geom_point(alpha=0.5, size=2 , aes(color=MntSpent)) +
geom_smooth(method='lm', formula= y~x) +
labs(y="MntSpent", x="NumWebPurchases", subtitle="NumWebPurchases vs MntSpent")
X_test$Dt_Customer <- NULL
pres<-predict(model1,X_test)
plot.default(X_test$MntSpent,type = "l",lty = 1,col="red")
lines(pres,type = "l",col = "blue")
plot.default(pres,type = "l",col="red")
mse<-mean((pres-X_test$MntSpent)^2)
rmse<-sqrt(mse)
sprintf("RMSE: %f", rmse)
sprintf("Chuẩn hóa RMSE: %f", rmse/(max(X_test$MntSpent) - min(X_test$MntSpent)))
sprintf("Chuẩn hóa RMSE: %f", rmse/mean(X_test$MntSpent))
sprintf("R^2 trên tập dự đoán với tập test: %f", cor(X_test$MntSpent,pres))
sprintf("Tập dữ liệu phân bố từ [%d, %d]", min(X_test$MntSpent), max(X_test$MntSpent))
data_1<- na.omit(marketing_data)
str(data_1)
library(caTools)
set.seed(123)
sample <- sample.split(marketing_data$Response , SplitRatio = 0.7)
# chia mẫu thành X_train,X_test
X_train <- subset(marketing_data, sample == TRUE)# mẫu xây dựng
X_test <- subset(marketing_data, sample == FALSE)# mẫu kiểm định
X_train$Response <- as.integer(X_train$Response)
X_test$Response <- as.integer(X_test$Response)
model4 <- glm(formula = Response ~ Income+Education+Recency+MntWines+MntFruits+MntMeatProducts+MntFishProducts+MntSweetProducts+MntGoldProds+NumDealsPurchases+NumWebPurchases+NumCatalogPurchases+NumStorePurchases+NumWebVisitsMonth ,family = "binomial" ,data = X_train)
summary(model4)
#glmImp <- varImp(model4)
#family = "binomial" biến nhị phân cũng là biến kết quả
# đưa ra dự đoán với response là xác xuất
probabilities = predict(model4,X_test, type = "response")
# với xác xuất nằm trong khoảng thì đánh giá mô hình với độ chính xác mô hình
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
mean(predicted.classes == X_test$Response)
table(X_test$Response, predicted.classes > 0.5 )
20/(79+20)
545/(79+545)
library(ROCR)
# phương trình dự báo
ptdubao = prediction(probabilities ,X_test$Response)
# xây dựng hàm thực hiện với độ nhạy và độ đặc hiệu
hinhptdubao  = performance(ptdubao , "tpr", "fpr")
plot(hinhptdubao)
#plot(hinhptdubao , colorize = TRUE, print.cotoffs.at  = seq (0,1, by=0.1 ),test.adj= c(-0.2,1.7))
as.numeric(performance(ptdubao, "auc")@y.values)
df_campaigns<-marketing_data%>%
select(Country,AcceptedCmp1,AcceptedCmp2,AcceptedCmp3,AcceptedCmp4,AcceptedCmp5)%>%
group_by(Country)%>%
summarise_all(funs(mean))%>%
gather(.,Campaign,Acceptance_rate,"AcceptedCmp1":"AcceptedCmp5")
ggplot(data =df_campaigns ,aes(x=Country,y=Acceptance_rate,fill=Campaign))+
geom_col(position="stack",width=0.5)+
scale_fill_brewer(palette = "RdGy")+
scale_y_continuous(labels=scales::percent)+
ggtitle("Acceptance rate of Campaigns across Countries")
s <- c(sum(marketing_data$NumDealsPurchases), sum(marketing_data$NumCatalogPurchases), sum(marketing_data$NumStorePurchases), sum(marketing_data$NumWebPurchases))
s <- round((s/sum(marketing_data$NumPurchases))*100)
label <- c("Deal", "Catalog", "Store", "Web")
data <- data.frame(label, s)
ggplot(data, aes(x="", y=s, fill=label)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
geom_text(aes(label = paste0(s, "%")), position = position_stack(vjust=0.5)) +
labs(x = NULL, y = NULL, fill = NULL) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
scale_fill_manual(values=c("#6BAE6A", "#FDE82E", "#4B0B5B", "#34667E"))
products <- c("Wines", "Fruits", "Meat", "Fish", "Sweets", "Gold")
spent <- c(sum(marketing_data$MntWines), sum(marketing_data$MntFruits), sum(marketing_data$MntMeatProducts), sum(marketing_data$MntFishProducts), sum(marketing_data$MntSweetProducts), sum(marketing_data$MntGoldProds))
df <- data.frame(products, spent)
ggplot(df, aes(x="", y=spent, fill=products)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
geom_text(aes(label = paste0(spent, "$")), position = position_stack(vjust=0.5)) +
labs(x = NULL, y = NULL, fill = NULL) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
scale_fill_manual(values=c("#7CB5EC", "#434348", "#90ED7D", "#F7A35C", "#8085E9", "#F15C80"))
df_cam<-marketing_data%>%
group_by(Rel_Status) %>%
pivot_longer(contains("cmp")) %>%
mutate(name=case_when(
name == "accepted_cmp1" ~ "Cmp_1",
name == "accepted_cmp2" ~ "Cmp_2",
name == "accepted_cmp4" ~ "Cmp_4",
name == "accepted_cmp5" ~ "Cmp_5",
name == "accepted_cmp3"~ "Cmp_3",
TRUE ~ name))->cmp_pivot
aggregate(value ~Rel_Status+name,cmp_pivot,sum)->agg_cmp
agg_cmp %>%
group_by(name) %>%
ggplot(aes(name,value))+geom_col(fill="blue")+
gghighlight::gghighlight(name=="Cmp_4")+
labs(title = "Each Of The Campaigns Did Well Apart From Campaign 2",
subtitle = "Campaign 3, 4 did better than any other camapaign",
y="COunt of Campaign",x="Campaign")+
ggthemes::theme_igray()
